<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>William-Liwei&#39;s blog</title>
  
  <subtitle>We are all in the gutter, but some of us are looking at the stars.</subtitle>
  <link href="https://lwow.xyz/atom.xml" rel="self"/>
  
  <link href="https://lwow.xyz/"/>
  <updated>2025-02-18T15:20:46.803Z</updated>
  <id>https://lwow.xyz/</id>
  
  <author>
    <name>黎玮</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何开发基于 Streamlit 和 SQLite 的数据库管理工具</title>
    <link href="https://lwow.xyz/2025/02/18/%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E5%9F%BA%E4%BA%8E-Streamlit-%E5%92%8C-SQLite-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    <id>https://lwow.xyz/2025/02/18/%E5%A6%82%E4%BD%95%E5%BC%80%E5%8F%91%E5%9F%BA%E4%BA%8E-Streamlit-%E5%92%8C-SQLite-%E7%9A%84%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</id>
    <published>2025-02-18T15:19:26.000Z</published>
    <updated>2025-02-18T15:20:46.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用-Streamlit-和-SQLite-构建高效数据库管理工具"><a href="#用-Streamlit-和-SQLite-构建高效数据库管理工具" class="headerlink" title="用 Streamlit 和 SQLite 构建高效数据库管理工具"></a>用 Streamlit 和 SQLite 构建高效数据库管理工具</h2><p>在数据驱动的开发中，数据库管理是一个不可或缺的环节。最近，我开发了一个基于 Python 的简单数据库管理工具，用于管理和展示石窟艺术数据。这个项目不仅帮助我巩固了对 Streamlit 和 SQLite 的理解，还让我体会到了快速开发工具的强大能力。</p><h3 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h3><p>我们的目标是创建一个简单易用的工具，用于管理和展示石窟艺术数据。这些数据存储在一个 SQLite 数据库中，包括雕塑的时期、洞窟名称、洞窟编号、来源、地区以及相关的图片等信息。为了实现这一目标，我选择了 Python 的 Streamlit 框架，因为它能够快速搭建交互式 Web 应用。</p><span id="more"></span><h3 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h3><ul><li><strong>Python</strong>：作为开发语言，简洁且功能强大。</li><li><strong>Streamlit</strong>：用于构建交互式 Web 界面。</li><li><strong>SQLite</strong>：轻量级数据库，适合小型项目。</li></ul><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><h4 id="1-数据库操作"><a href="#1-数据库操作" class="headerlink" title="1. 数据库操作"></a>1. 数据库操作</h4><p>我封装了几个关键的数据库操作函数，包括查询、插入&#x2F;更新和删除记录。以下是部分代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">query_database</span>(<span class="params">period=<span class="literal">None</span>, cave_name=<span class="literal">None</span>, cave_number=<span class="literal">None</span>, source=<span class="literal">None</span>, region=<span class="literal">None</span></span>):</span><br><span class="line">    conn = sqlite3.connect(sqlite_db_path)</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    query = <span class="string">&quot;SELECT * FROM BuddhaSculptures&quot;</span></span><br><span class="line">    params = []</span><br><span class="line">    conditions = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> period:</span><br><span class="line">        conditions.append(<span class="string">&quot;period = ?&quot;</span>)</span><br><span class="line">        params.append(period)</span><br><span class="line">    <span class="keyword">if</span> cave_name:</span><br><span class="line">        conditions.append(<span class="string">&quot;cave_name = ?&quot;</span>)</span><br><span class="line">        params.append(cave_name)</span><br><span class="line">    <span class="keyword">if</span> cave_number:</span><br><span class="line">        conditions.append(<span class="string">&quot;cave_number = ?&quot;</span>)</span><br><span class="line">        params.append(cave_number)</span><br><span class="line">    <span class="keyword">if</span> source:</span><br><span class="line">        conditions.append(<span class="string">&quot;source = ?&quot;</span>)</span><br><span class="line">        params.append(source)</span><br><span class="line">    <span class="keyword">if</span> region:</span><br><span class="line">        conditions.append(<span class="string">&quot;region = ?&quot;</span>)</span><br><span class="line">        params.append(region)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> conditions:</span><br><span class="line">        query += <span class="string">&quot; WHERE &quot;</span> + <span class="string">&quot; AND &quot;</span>.join(conditions)</span><br><span class="line"></span><br><span class="line">    cursor.execute(query, params)</span><br><span class="line">    results = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    conn.close()</span><br><span class="line">    <span class="keyword">return</span> results</span><br></pre></td></tr></table></figure><p>这些函数通过 SQLite 的 Python 接口实现了对数据库的基本操作。</p><h4 id="2-Streamlit-界面开发"><a href="#2-Streamlit-界面开发" class="headerlink" title="2. Streamlit 界面开发"></a>2. Streamlit 界面开发</h4><p>Streamlit 的界面开发非常直观。我通过简单的表单和按钮实现了查询、添加&#x2F;更新和删除记录的功能。以下是部分界面代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">st.subheader(<span class="string">&quot;Query Records&quot;</span>)</span><br><span class="line">period = st.text_input(<span class="string">&quot;Period&quot;</span>)</span><br><span class="line">cave_name = st.text_input(<span class="string">&quot;Cave Name&quot;</span>)</span><br><span class="line"><span class="comment"># 其他输入框...</span></span><br><span class="line"><span class="keyword">if</span> st.button(<span class="string">&quot;Query&quot;</span>):</span><br><span class="line">    results = query_database(period, cave_name, cave_number, source, region)</span><br><span class="line">    <span class="keyword">if</span> results:</span><br><span class="line">        st.write(<span class="string">f&quot;Found <span class="subst">&#123;<span class="built_in">len</span>(results)&#125;</span> results:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> results:</span><br><span class="line">            st.write(<span class="string">f&quot;ID: <span class="subst">&#123;row[<span class="number">0</span>]&#125;</span>, Period: <span class="subst">&#123;row[<span class="number">5</span>]&#125;</span>, Cave Name: <span class="subst">&#123;row[<span class="number">3</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            image_data = row[-<span class="number">1</span>]</span><br><span class="line">            image = display_image_from_blob(image_data)</span><br><span class="line">            <span class="keyword">if</span> image:</span><br><span class="line">                st.image(image, caption=<span class="string">f&quot;Image ID: <span class="subst">&#123;row[<span class="number">0</span>]&#125;</span>&quot;</span>, use_container_width=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                st.write(<span class="string">&quot;No image available.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        st.write(<span class="string">&quot;No results found.&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过 Streamlit 提供的组件，如 <code>st.text_input</code> 和 <code>st.button</code>，用户可以轻松进行数据查询。</p><h4 id="3-图片处理"><a href="#3-图片处理" class="headerlink" title="3. 图片处理"></a>3. 图片处理</h4><p>为了支持图片的上传和展示，我使用了 <code>Pillow</code> 库来处理图片数据，并将其以 BLOB 格式存储在数据库中。以下是图片展示的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">display_image_from_blob</span>(<span class="params">blob_data</span>):</span><br><span class="line">    <span class="keyword">if</span> blob_data:</span><br><span class="line">        image_bytes = io.BytesIO(blob_data)</span><br><span class="line">        image = Image.<span class="built_in">open</span>(image_bytes)</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>通过这种方式，用户可以方便地上传图片，并在查询时直接查看图片内容。</p><h3 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h3><p>为了方便启动项目，我编写了一个启动脚本 <code>db_start_streamlit.py</code>，它会检查环境变量，确保 Streamlit 只运行一次。以下是启动脚本的核心代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> os.environ.get(ENV_FLAG) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        os.environ[ENV_FLAG] = <span class="string">&quot;1&quot;</span></span><br><span class="line">        os.system(<span class="string">&quot;streamlit run db_streamlit.py&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Streamlit is already running.&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过这个脚本，用户只需运行一个命令即可启动整个应用。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这个项目，我不仅巩固了 Python 和 SQLite 的开发技能，还学习了如何使用 Streamlit 构建简单的 Web 应用。这个工具虽然简单，但已经能够满足我们对石窟艺术数据的基本管理需求。未来，我计划进一步优化界面设计，并尝试将数据迁移到更强大的数据库系统中，以支持更大的数据量和更复杂的查询。</p><p>如果你对这个项目感兴趣，或者有类似的开发需求，欢迎与我交流！</p><hr><p><strong>附录</strong></p><ul><li><a href="https://docs.streamlit.io/">Streamlit 官方文档</a> </li><li><a href="https://www.sqlite.org/docs.html">SQLite 官方文档</a> </li><li><a href="https://pillow.readthedocs.io/en/stable/">Pillow 官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;用-Streamlit-和-SQLite-构建高效数据库管理工具&quot;&gt;&lt;a href=&quot;#用-Streamlit-和-SQLite-构建高效数据库管理工具&quot; class=&quot;headerlink&quot; title=&quot;用 Streamlit 和 SQLite 构建高效数据库管理工具&quot;&gt;&lt;/a&gt;用 Streamlit 和 SQLite 构建高效数据库管理工具&lt;/h2&gt;&lt;p&gt;在数据驱动的开发中，数据库管理是一个不可或缺的环节。最近，我开发了一个基于 Python 的简单数据库管理工具，用于管理和展示石窟艺术数据。这个项目不仅帮助我巩固了对 Streamlit 和 SQLite 的理解，还让我体会到了快速开发工具的强大能力。&lt;/p&gt;
&lt;h3 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h3&gt;&lt;p&gt;我们的目标是创建一个简单易用的工具，用于管理和展示石窟艺术数据。这些数据存储在一个 SQLite 数据库中，包括雕塑的时期、洞窟名称、洞窟编号、来源、地区以及相关的图片等信息。为了实现这一目标，我选择了 Python 的 Streamlit 框架，因为它能够快速搭建交互式 Web 应用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Python" scheme="https://lwow.xyz/tags/Python/"/>
    
    <category term="Streamlit" scheme="https://lwow.xyz/tags/Streamlit/"/>
    
    <category term="SQLite" scheme="https://lwow.xyz/tags/SQLite/"/>
    
    <category term="数据库管理" scheme="https://lwow.xyz/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>课程翼选通：基于flask和playwright的云主机部署网站</title>
    <link href="https://lwow.xyz/2025/02/17/%E8%AF%BE%E7%A8%8B%E7%BF%BC%E9%80%89%E9%80%9A%EF%BC%9A%E5%9F%BA%E4%BA%8Eflask%E5%92%8Cplaywright%E7%9A%84%E4%BA%91%E4%B8%BB%E6%9C%BA%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/"/>
    <id>https://lwow.xyz/2025/02/17/%E8%AF%BE%E7%A8%8B%E7%BF%BC%E9%80%89%E9%80%9A%EF%BC%9A%E5%9F%BA%E4%BA%8Eflask%E5%92%8Cplaywright%E7%9A%84%E4%BA%91%E4%B8%BB%E6%9C%BA%E9%83%A8%E7%BD%B2%E7%BD%91%E7%AB%99/</id>
    <published>2025-02-17T14:21:37.000Z</published>
    <updated>2025-02-17T14:53:37.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程翼选通：基于-Playwright-与-Flask-的云主机部署网站"><a href="#课程翼选通：基于-Playwright-与-Flask-的云主机部署网站" class="headerlink" title="课程翼选通：基于 Playwright 与 Flask 的云主机部署网站"></a>课程翼选通：基于 Playwright 与 Flask 的云主机部署网站</h1><p><em>黎玮，王子欣</em></p><p>上海大学计算机工程与科学学院</p><p><em>摘要</em></p><p>“课程翼选通”是一个创新的部署于天翼云主机上的教育辅助平台，旨在通过技术手段简化高校学生的选课流程，提升选课效率，并通过集成成绩查询、课程评价和用户社区等功能，构建一个全方位的教务辅助系统。该系统采用 Flask 框架进行后端开发，确保了服务的稳定性和扩展性。同时，通过 Playwright 实现的自动化操作，使得选课过程更加智能化。此外，系统还引入了情感分析等 AI 技术，以增强用户体验，提供更加个性化的服务。通过这些技术的应用，“课程翼选通”不仅能够简化选课流程，还能促进教育资源的合理分配，为教育公平做出贡献。</p><span id="more"></span><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>随着信息技术的快速发展，教育行业正经历着前所未有的变革。在高等教育领域，课程选择是学生学业规划的重要环节，但传统的选课系统存在诸多问题，如选课难、抢课累，甚至出现了买卖课程的不良现象。为了解决这些问题，我们设计并实现了“课程翼选通”，一个基于 Playwright 与 Flask 的云主机部署网站，旨在简化选课流程，提高学生的选课体验，并促进教育资源的合理分配。</p><h2 id="二、选课难的现状详析"><a href="#二、选课难的现状详析" class="headerlink" title="二、选课难的现状详析"></a>二、选课难的现状详析</h2><p>选课难的现状，是多重因素交织的结果。首先，高校课程资源有限，尤其是热门课程，其名额往往远不能满足学生的需求，导致供不应求的现象普遍存在。其次，技术门槛的存在，使得部分学生在选课高峰期难以迅速完成选课操作，错失了心仪的课程。再者，网络拥堵问题进一步加剧了选课的难度，选课系统开放时，大量学生同时登录，导致服务器负载过重，网页加载缓慢甚至崩溃，严重影响了选课的顺利进行。</p><p>这种不公平的教育资源分配方式，不仅影响了学生的学业发展，更在一定程度上破坏了教育生态的和谐与稳定。此外，抢课现象还催生了一系列不正当行为，如课程买卖、恶意占座等，这些行为严重违背了教育的初衷和伦理道德，对学校的长远发展造成了不良影响。</p><h2 id="三、系统架构"><a href="#三、系统架构" class="headerlink" title="三、系统架构"></a>三、系统架构</h2><p>“课程翼选通”的前端架构采用响应式设计，以适应不同设备的屏幕尺寸和分辨率，确保用户在任何设备上都能获得一致的体验。前端界面使用 HTML5、CSS3 和 JavaScript 构建，这些技术的选择不仅保证了页面的现代感和交互性，还使得页面加载速度更快，用户体验更佳。系统实现了实时数据更新和动态交互，用户可以即时看到选课状态的变化，无需刷新页面，极大地提升了操作的便捷性。</p><p>后端架构基于 Flask 框架，它轻量级且灵活，非常适合处理 HTTP 请求和路由分发。使用 SQLAlchemy 进行数据库操作，它提供了一个高层次的 ORM（对象关系映射）工具，使得数据库操作更加直观和安全。Playwright 用于执行自动化任务，如模拟用户登录、选课等操作，提高了系统的自动化程度。此外，后端还集成了深度学习模型，用于实现评论的情感分析，这不仅提升了系统的智能化水平，也为用户带来了更加丰富的交互体验。</p><h2 id="四、核心功能模块"><a href="#四、核心功能模块" class="headerlink" title="四、核心功能模块"></a>四、核心功能模块</h2><h3 id="（一）智能选课系统"><a href="#（一）智能选课系统" class="headerlink" title="（一）智能选课系统"></a>（一）智能选课系统</h3><p>智能选课系统是“课程翼选通”的核心功能之一，它通过 rob_course() 函数实现，支持多课程并发选课，能够处理高并发情况下的选课请求。该系统实现了定时选课功能，用户可以预设选课时间，系统自动执行选课操作，极大地方便了用户。同时，系统还能自动识别课程状态，如课程是否已满、是否冲突等，并及时发送邮件通知用户选课结果，提高了选课的成功率和用户体验。</p><h3 id="（二）用户管理系统"><a href="#（二）用户管理系统" class="headerlink" title="（二）用户管理系统"></a>（二）用户管理系统</h3><p>用户管理系统是“课程翼选通”的另一个核心模块，它通过 User 类实现。该系统为用户提供了等级体系和经验值系统，用户可以通过参与社区活动、发表评论等方式积累经验值，提升等级。此外，系统还提供了头像管理功能，用户可以上传个性化头像，增强个人标识。社交互动功能则允许用户之间进行互动，如点赞、评论等，增强了社区的活跃度。</p><h3 id="（三）评论系统与-AI-分析"><a href="#（三）评论系统与-AI-分析" class="headerlink" title="（三）评论系统与 AI 分析"></a>（三）评论系统与 AI 分析</h3><p>评论系统与 AI 分析模块通过 SentimentAnalyzer 类实现，它集成了情感分析模型，能够对用户评论进行情感倾向分析，提供多维度的评价指标。系统还能将分析结果进行数据可视化展示，使用户能够直观地了解课程的受欢迎程度和优缺点。智能评论推荐功能则根据用户的历史行为和偏好，推荐相关的评论内容，提升了用户的参与度和满意度。</p><h2 id="五、技术创新点"><a href="#五、技术创新点" class="headerlink" title="五、技术创新点"></a>五、技术创新点</h2><p>“课程翼选通”在技术创新方面也取得了显著成果。系统集成了 RoBERTa 模型进行评论情感分析，这是一种先进的自然语言处理模型，能够准确地识别和分析文本数据中的情感倾向。通过这种技术，系统能够实现多维度的课程评价分析，提供智能评论摘要和推荐，极大地丰富了用户的交互体验，并为课程改进提供了数据支持。</p><p>“课程翼选通”在自动化技术方面也取得了显著成果。系统基于 Playwright 的无头浏览器操作，能够模拟用户的选课行为，包括登录、选课、查分等操作，极大地提高了选课的自动化程度。智能验证码处理技术使得系统能够自动识别和处理验证码，减少了用户的操作负担。此外，系统还实现了多线程并发选课，提高了选课的效率和成功率。</p><p>为了提升用户体验，“课程翼选通”引入了用户等级和经验值系统，激励用户积极参与社区活动。实时邮件通知功能则确保用户能够及时了解自己的选课状态和系统动态。个性化数据展示则根据用户的行为和偏好，展示定制化的信息和推荐，提升了用户的满意度和忠诚度。</p><h2 id="六、系统性能"><a href="#六、系统性能" class="headerlink" title="六、系统性能"></a>六、系统性能</h2><p>在并发处理方面，“课程翼选通”采用了线程锁来保证数据的一致性，避免了多线程操作时可能出现的数据冲突问题。通过实现模型单例模式，系统减少了对象的创建和销毁，提高了性能。同时，系统还优化了数据库查询效率，通过索引、查询优化等技术，提高了数据处理速度，确保了系统在高并发情况下的稳定运行。</p><p>系统性能的另一个重要方面是错误处理。“课程翼选通”具备完善的异常处理机制，能够捕获和处理各种异常情况，确保系统的稳定运行。日志记录系统则记录了系统运行过程中的关键信息，便于问题的追踪和分析。自动重试机制则在遇到暂时性错误时自动重新执行操作，提高了系统的鲁棒性。</p><h2 id="七、安全性设计"><a href="#七、安全性设计" class="headerlink" title="七、安全性设计"></a>七、安全性设计</h2><p>安全性设计是“课程翼选通”的另一个重点。系统采用了会话管理和认证机制，确保了用户数据的安全和隐私。文件上传安全控制则防止了恶意文件的上传，保护了系统不受攻击。数据加密存储则确保了用户数据在存储和传输过程中的安全性，防止了数据泄露。</p><h2 id="八、部署方案"><a href="#八、部署方案" class="headerlink" title="八、部署方案"></a>八、部署方案</h2><p>“课程翼选通”基于云服务器部署，这不仅提高了系统的可访问性和稳定性，还降低了维护成本。域名已经成功备案，用户可以通过访问网站来使用“课程翼选通”服务。云部署方案还提供了易于扩展的架构，便于系统功能的扩展和性能的提升。</p><h2 id="九、未来展望"><a href="#九、未来展望" class="headerlink" title="九、未来展望"></a>九、未来展望</h2><p>展望未来，“课程翼选通”计划引入更多的 AI 技术，如自然语言处理、机器学习等，以进一步增强用户体验。系统还计划扩展社区功能，增加用户间的互动和交流，打造一个更加活跃的学术社区。同时，系统将继续优化性能，提升处理速度和稳定性。此外，增加移动端支持也是未来的发展方向，使得用户能够随时随地访问“课程翼选通”，享受便捷的服务。</p><h2 id="十、技术亮点总结"><a href="#十、技术亮点总结" class="headerlink" title="十、技术亮点总结"></a>十、技术亮点总结</h2><p>“课程翼选通”的技术亮点主要包括 AI 技术的应用、高度的自动化、优秀的用户体验、强大的扩展性和良好的安全性。AI 技术的应用使得系统能够提供更加智能化的服务，如情感分析、智能推荐等。高度的自动化则简化了用户的操作流程，提高了效率。优秀的用户体验则体现在系统的易用性、个性化服务等方面。强大的扩展性使得系统能够不断引入新功能，适应不断变化的需求。良好的安全性则确保了用户数据的安全和隐私。这些技术的结合，使得“课程翼选通”成为一个创新且实用的教育科技项目。</p><h2 id="十一、操作手册"><a href="#十一、操作手册" class="headerlink" title="十一、操作手册"></a>十一、操作手册</h2><h3 id="1-访问网站"><a href="#1-访问网站" class="headerlink" title="1. 访问网站"></a>1. 访问网站</h3><p>进入“课程翼选通”助手（可通过域名访问；也可通过 IP 地址进行访问：xxxxxxxx:5000）。为方便测试，网站默认填写了一个登陆账号，点击“发送验证码”，再点击“登录”。</p><h3 id="2-填写个人信息"><a href="#2-填写个人信息" class="headerlink" title="2. 填写个人信息"></a>2. 填写个人信息</h3><p>进入网站后，填写个人信息。注意：受限于“课程黄牛”的存在，为避免出现恶意占课、抢课等行为，课程翼选通 web 端的“定时选课”功能暂时不对外开放，仅在课程翼选通的 portable 端上开放使用。</p><h3 id="3-获取-Cookie"><a href="#3-获取-Cookie" class="headerlink" title="3. 获取 Cookie"></a>3. 获取 Cookie</h3><p>滑动至页面底部，点击“获取 cookie”选项。</p><h3 id="4-填写课程信息"><a href="#4-填写课程信息" class="headerlink" title="4. 填写课程信息"></a>4. 填写课程信息</h3><p>向上滑动，填写课程信息。</p><h3 id="5-更新数据并开始排课"><a href="#5-更新数据并开始排课" class="headerlink" title="5. 更新数据并开始排课"></a>5. 更新数据并开始排课</h3><p>滑动至页面底部，点击“更新数据”，再点击“开始排课！”选项。此时云主机会弹出新页面，进入上海大学选课网站。选课结束后，客户端网页上将会显示排课结果。若选课成功，会向用户发送弹窗，提示选课成功。与此同时，系统会自动向用户所登录的邮箱（即登录时接受验证码的邮箱）发送一封“选课成功通知”，方便用户在离开电脑后依然可以随时收到信息。</p><h3 id="6-打开选课网站"><a href="#6-打开选课网站" class="headerlink" title="6. 打开选课网站"></a>6. 打开选课网站</h3><p>点击“打开选课”选项，会跳转至上海大学选课网站。该功能使用场景：对于某一课程尚未有具体了解，或对课程号不太清楚，此时前往上大选课官网，可详细了解该课程的介绍，并记录相关课程号、教师号等数据，以便用于选课。</p><h3 id="7-打开排课助手"><a href="#7-打开排课助手" class="headerlink" title="7. 打开排课助手"></a>7. 打开排课助手</h3><p>点击“打开排课助手”选项，会跳转至 <a href="https://xk.shuosc.com/">https://xk.shuosc.com/</a> 选课助手。该功能使用场景：对于课程时间上是否重叠不太清楚，或有多种排课方案想要比较利弊，此时打开 shuosc 选课助手，即可快速了解各类课程的时间排布，便于确定最需要抢选的课程。</p><h3 id="8-打开考试网站"><a href="#8-打开考试网站" class="headerlink" title="8. 打开考试网站"></a>8. 打开考试网站</h3><p>点击“打开考试”选项，会跳转至 <a href="https://cj.shu.edu.cn/Home/StudentIndex">https://cj.shu.edu.cn/Home/StudentIndex</a> 上海大学成绩查询。该功能使用场景：选课完毕后，需要了解各类课程的考核类型、考核时间；完成考试后，想要了解自己所得分数。登录考试网站，即可查询相关信息。</p><h3 id="9-成绩查询"><a href="#9-成绩查询" class="headerlink" title="9. 成绩查询"></a>9. 成绩查询</h3><ol><li>填写自己想要查询的考试学期。</li><li>滑动至页面底部，点击“更新数据”选项。</li><li>顶部会显示“数据更新成功”。</li><li>滑动至页面底部，点击“开始查分”选项。</li><li>等待片刻后，会有分数弹窗。与此同时，系统会自动向用户所登录的邮箱（即登录时接受验证码的邮箱）发送一封“成绩查询结果”，方便用户在离开电脑后依然可以随时收到信息。</li></ol><h3 id="10-课程评论"><a href="#10-课程评论" class="headerlink" title="10. 课程评论"></a>10. 课程评论</h3><ol><li>点击“课程评论”选项，会跳转到课程评论页面。</li><li>填写自己要评价的课程，点击“提交评论”。</li><li>输入自己想查询的课程号，点击“查找评论”，会显示查找结果（课程评价均分、每条评价的详细内容等等）。</li><li>完成所有需求后，回到主页底部，点击“登出”，退出账号。</li></ol><h2 id="十二、推荐资源"><a href="#十二、推荐资源" class="headerlink" title="十二、推荐资源"></a>十二、推荐资源</h2><p>如果您对“课程翼选通”的技术实现感兴趣，可以查看相关的 GitHub 代码：<a href="https://github.com/William-Liwei/Course-wing-gating">课程翼选通 GitHub 仓库</a>。您也可以阅读指南 PDF 文件，以获取更详细的指导。</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;课程翼选通：基于-Playwright-与-Flask-的云主机部署网站&quot;&gt;&lt;a href=&quot;#课程翼选通：基于-Playwright-与-Flask-的云主机部署网站&quot; class=&quot;headerlink&quot; title=&quot;课程翼选通：基于 Playwright 与 Flask 的云主机部署网站&quot;&gt;&lt;/a&gt;课程翼选通：基于 Playwright 与 Flask 的云主机部署网站&lt;/h1&gt;&lt;p&gt;&lt;em&gt;黎玮，王子欣&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;上海大学计算机工程与科学学院&lt;/p&gt;
&lt;p&gt;&lt;em&gt;摘要&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;“课程翼选通”是一个创新的部署于天翼云主机上的教育辅助平台，旨在通过技术手段简化高校学生的选课流程，提升选课效率，并通过集成成绩查询、课程评价和用户社区等功能，构建一个全方位的教务辅助系统。该系统采用 Flask 框架进行后端开发，确保了服务的稳定性和扩展性。同时，通过 Playwright 实现的自动化操作，使得选课过程更加智能化。此外，系统还引入了情感分析等 AI 技术，以增强用户体验，提供更加个性化的服务。通过这些技术的应用，“课程翼选通”不仅能够简化选课流程，还能促进教育资源的合理分配，为教育公平做出贡献。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站" scheme="https://lwow.xyz/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="flask" scheme="https://lwow.xyz/tags/flask/"/>
    
    <category term="playwright" scheme="https://lwow.xyz/tags/playwright/"/>
    
    <category term="选课" scheme="https://lwow.xyz/tags/%E9%80%89%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站教学(2)</title>
    <link href="https://lwow.xyz/2025/02/16/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E5%AD%A6-2/"/>
    <id>https://lwow.xyz/2025/02/16/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E5%AD%A6-2/</id>
    <published>2025-02-16T06:22:15.000Z</published>
    <updated>2025-02-16T06:37:57.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从一开始：更改Hexo网站域名"><a href="#从一开始：更改Hexo网站域名" class="headerlink" title="从一开始：更改Hexo网站域名"></a><strong>从一开始：更改Hexo网站域名</strong></h2><p>本篇博客将详细介绍如何通过 Vercel 设置自定义域名，实现个性化且高效的网站托管。本文将逐步介绍  如何使用 Vercel 以及如何在 GitHub 上设置自定义域名。</p><p>常见的修改域名方式有如下两种，不过个人推荐采用Vercel。</p><span id="more"></span><h3 id="1-使用-Vercel-更改域名（推荐使用这种方式）"><a href="#1-使用-Vercel-更改域名（推荐使用这种方式）" class="headerlink" title="1. 使用 Vercel 更改域名（推荐使用这种方式）"></a>1. 使用 Vercel 更改域名（推荐使用这种方式）</h3><p>Vercel 是一个用于部署前端项目的云平台，支持自定义域名。以下是使用 Vercel 更改域名的步骤：</p><ol><li><p><strong>注册并登录 Vercel</strong>：访问 <a href="https://vercel.com/">Vercel 官网</a>，使用 GitHub 或 Google 账号注册并登录。</p></li><li><p><strong>导入项目</strong>：在 Vercel 仪表板中，点击 “Import Project”，选择你的 Hexo 项目仓库（可以是 GitHub、GitLab 或 Bitbucket 等）。</p></li><li><p><strong>选择项目</strong>：选择你要部署的 Hexo 项目，Vercel 会自动拉取项目代码。</p></li><li><p><strong>配置构建</strong>：在 “Build &amp; Development Settings” 中，配置项目的构建命令和输出目录。对于 Hexo 项目，通常设置如下：</p><ul><li><strong>Build Command</strong>：<code>hexo clean &amp;&amp; hexo generate</code></li><li><strong>Output Directory</strong>：<code>public</code>（Hexo 默认生成的静态文件目录）</li></ul></li><li><p><strong>添加自定义域名</strong>：</p><ul><li>在 Vercel 仪表板中，点击你的项目，进入项目详情页面。</li><li>点击 “Domains” 选项卡，然后点击 “Add Domain”。</li><li>输入你的自定义域名，例如 <code>yourdomain.com</code>，然后点击 “Add”。</li></ul></li><li><p><strong>配置 DNS 解析</strong>：<em>（这一块可以参照CSDN上”菜鸟是大神“的blog，其中有更详细的说明，很有帮助）</em></p><ul><li>登录你的域名注册商（如阿里云、腾讯云等），进入域名管理控制台。</li><li>添加两条记录：<ul><li><strong>A 记录</strong>：主机记录为 <code>@</code>，记录值为 Vercel 提供的 IP 地址（可以在 Vercel 的 “DNS” 设置中查看）。</li><li><strong>CNAME 记录</strong>：主机记录为 <code>www</code>，记录值为 <code>yourdomain.com</code>。</li></ul></li></ul></li><li><p><strong>等待 DNS 生效</strong>：DNS 解析通常需要几分钟到几小时的时间生效。生效后，你的域名将指向 Vercel 上的 Hexo 项目。</p><blockquote><p>【详细教程hexo博客搭建】2、Vercel部署并绑定自定义域名+安装Butterfly主题_vercel自定义域名-CSDN博客 <a href="https://blog.csdn.net/wufaqidong1/article/details/132951333">https://blog.csdn.net/wufaqidong1/article/details/132951333</a></p></blockquote></li></ol><h3 id="2-在-Hexo-部署到-GitHub-时设置自定义域名"><a href="#2-在-Hexo-部署到-GitHub-时设置自定义域名" class="headerlink" title="2. 在 Hexo 部署到 GitHub 时设置自定义域名"></a>2. 在 Hexo 部署到 GitHub 时设置自定义域名</h3><p>除了使用 Vercel，你还可以在 Hexo 部署到 GitHub 时设置自定义域名。以下是具体步骤：</p><ol><li><p><strong>购买并配置域名</strong>：</p><ul><li>购买一个域名，例如在阿里云或腾讯云上购买。</li><li>在域名注册商的控制台中，添加两条记录：<ul><li><strong>A 记录</strong>：主机记录为 <code>@</code>，记录值为 GitHub Pages 的 IP 地址（可以通过 <code>ping username.github.io</code> 获取，例如 <code>185.199.110.153</code>）。</li><li><strong>CNAME 记录</strong>：主机记录为 <code>www</code>，记录值为 <code>username.github.io</code>（将 <code>username</code> 替换为你的 GitHub 用户名）。</li></ul></li></ul></li><li><p><strong>配置 Hexo 项目</strong>：</p><ul><li><p>在 Hexo 项目的根目录下，创建一个名为 <code>CNAME</code> 的文件（无后缀），文件内容为你的自定义域名，例如 <code>yourdomain.com</code>。</p></li><li><p>修改 <code>_config.yml</code> 文件，将 <code>url</code> 和 <code>root</code> 设置为你的自定义域名：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://yourdomain.com</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>部署到 GitHub</strong>：</p><ul><li><p>确保你的 GitHub 仓库名称为 <code>username.github.io</code>，其中 <code>username</code> 是你的 GitHub 用户名。</p></li><li><p>在 <code>_config.yml</code> 中配置部署设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p>运行以下命令生成静态文件并部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>在 GitHub 设置自定义域名</strong>：</p><ul><li>登录 GitHub，进入你的仓库，点击 “Settings”。</li><li>在左侧菜单中选择 “Pages”，然后在 “Custom domain” 中输入你的自定义域名，例如 <code>yourdomain.com</code>，点击 “Save”。</li></ul></li><li><p><strong>开启 HTTPS</strong>：</p><ul><li>在 GitHub Pages 设置中，找到 “Enforce HTTPS” 选项，勾选该选项以强制使用 HTTPS。</li><li>如果需要，可以在域名注册商处申请免费的 SSL 证书（如阿里云的免费 SSL 证书），并按照提示操作。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;从一开始：更改Hexo网站域名&quot;&gt;&lt;a href=&quot;#从一开始：更改Hexo网站域名&quot; class=&quot;headerlink&quot; title=&quot;从一开始：更改Hexo网站域名&quot;&gt;&lt;/a&gt;&lt;strong&gt;从一开始：更改Hexo网站域名&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本篇博客将详细介绍如何通过 Vercel 设置自定义域名，实现个性化且高效的网站托管。本文将逐步介绍  如何使用 Vercel 以及如何在 GitHub 上设置自定义域名。&lt;/p&gt;
&lt;p&gt;常见的修改域名方式有如下两种，不过个人推荐采用Vercel。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站" scheme="https://lwow.xyz/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="教学" scheme="https://lwow.xyz/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="hexo" scheme="https://lwow.xyz/tags/hexo/"/>
    
    <category term="github" scheme="https://lwow.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>hexo建站教学(1)</title>
    <link href="https://lwow.xyz/2025/02/16/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E5%AD%A6-1/"/>
    <id>https://lwow.xyz/2025/02/16/hexo%E5%BB%BA%E7%AB%99%E6%95%99%E5%AD%A6-1/</id>
    <published>2025-02-16T06:13:43.000Z</published>
    <updated>2025-02-16T06:37:15.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从零开始：使用-Hexo-搭建并部署个人博客到-GitHub"><a href="#从零开始：使用-Hexo-搭建并部署个人博客到-GitHub" class="headerlink" title="从零开始：使用 Hexo 搭建并部署个人博客到 GitHub"></a>从零开始：使用 Hexo 搭建并部署个人博客到 GitHub</h2><p><img src="/2025/02/14/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/%E7%AB%99%E6%95%99%E5%AD%A6-1/hexo-logo.jpg" alt="Hexo Logo"></p><p>本篇博客将详细介绍如何使用 Hexo 搭建个人博客，并将其部署到 GitHub 上，实现免费且高效的个人网站托管。我们将从环境准备开始，逐步介绍 Hexo 的安装、配置、内容创作以及最终的部署过程。</p><span id="more"></span><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><p>在开始之前，请确保你的系统已经安装了以下工具：</p><ul><li><p><strong>Node.js 和 npm</strong>：Hexo 是基于 Node.js 的静态网站生成器，因此需要先安装 Node.js 和 npm（Node.js 自带 npm）。你可以通过以下命令检查是否已安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li></ul><p>如果未安装，可以从 <a href="https://nodejs.org/">Node.js 官方网站</a> 下载并安装。</p><ul><li><strong>Git</strong>：用于将代码推送到 GitHub。你可以从 <a href="https://git-scm.com/">Git 官方网站</a> 下载并安装。</li></ul><h3 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h3><p>安装 Hexo 非常简单，只需使用 npm 全局安装即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过以下命令验证是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>注意：如果无法运行，可以在所有涉及到 ” hexo“ 的命令之前加上 ”npx“ ，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo -v</span><br></pre></td></tr></table></figure><h3 id="3-创建-Hexo-项目"><a href="#3-创建-Hexo-项目" class="headerlink" title="3. 创建 Hexo 项目"></a>3. 创建 Hexo 项目</h3><p>在你希望存放博客的目录下，运行以下命令创建一个新的 Hexo 项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br></pre></td></tr></table></figure><p>Hexo 会自动安装项目所需的依赖包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="4-配置-Hexo"><a href="#4-配置-Hexo" class="headerlink" title="4. 配置 Hexo"></a>4. 配置 Hexo</h3><p>Hexo 的配置文件位于项目根目录下的 <code>_config.yml</code> 文件中。我们需要对其进行一些基本配置，例如站点名称、作者、描述等：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">My</span> <span class="string">Blog</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">A</span> <span class="string">Personal</span> <span class="string">Blog</span> <span class="string">Powered</span> <span class="string">by</span> <span class="string">Hexo</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">personal</span> <span class="string">blog</span> <span class="string">where</span> <span class="string">I</span> <span class="string">share</span> <span class="string">my</span> <span class="string">thoughts</span> <span class="string">and</span> <span class="string">experiences.</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Your</span> <span class="string">Name</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">en</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><h3 id="5-选择主题"><a href="#5-选择主题" class="headerlink" title="5. 选择主题"></a>5. 选择主题</h3><p>Hexo 支持多种主题，你可以根据自己的喜好选择。这里我们以官方推荐的 <a href="https://theme-next.js.org/">NexT</a> 主题为例：</p><ol><li><p>安装主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure></li><li><p>在 <code>_config.yml</code> 中设置主题：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure></li><li><p>安装主题依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/next</span><br><span class="line">npm install</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-创建内容"><a href="#6-创建内容" class="headerlink" title="6. 创建内容"></a>6. 创建内容</h3><p>Hexo 使用 Markdown 编写内容。你可以通过以下命令创建一篇新文章：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post <span class="string">&quot;My First Post&quot;</span></span><br></pre></td></tr></table></figure><p>这将在 <code>source/_posts</code> 目录下生成一篇名为 <code>my-first-post.md</code> 的文章。编辑该文件，添加你的内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: My First Post</span><br><span class="line">date: 2025-02-16 23:16:13</span><br><span class="line"><span class="section">tags: [Hexo, Blog]</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="section"># Welcome to My Blog</span></span><br><span class="line"></span><br><span class="line">This is my first post using Hexo. I&#x27;m excited to start sharing my thoughts and experiences here.</span><br></pre></td></tr></table></figure><h3 id="7-本地预览"><a href="#7-本地预览" class="headerlink" title="7. 本地预览"></a>7. 本地预览</h3><p>在推送代码到 GitHub 之前，可以使用 Hexo 的服务器功能进行本地预览：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>打开浏览器，访问 <code>http://localhost:4000</code>，即可看到你的博客。</p><h3 id="8-部署到-GitHub"><a href="#8-部署到-GitHub" class="headerlink" title="8. 部署到 GitHub"></a>8. 部署到 GitHub</h3><ol><li><p><strong>创建 GitHub 仓库</strong>：登录你的 GitHub 账号，创建一个新的仓库，例如 <code>yourusername.github.io</code>。</p></li><li><p><strong>配置部署</strong>：在 <code>_config.yml</code> 中添加部署配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/yourusername/yourusername.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li><p><strong>生成静态文件并部署</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>如果一切顺利，Hexo 会将生成的静态文件推送到你的 GitHub 仓库。</p></li></ol><h3 id="9-访问博客"><a href="#9-访问博客" class="headerlink" title="9. 访问博客"></a>9. 访问博客</h3><p>部署完成后，你的博客将可以通过 <code>https://yourusername.github.io</code> 访问。</p><h3 id="10-后续操作"><a href="#10-后续操作" class="headerlink" title="10. 后续操作"></a>10. 后续操作</h3><ul><li><strong>更新内容</strong>：每次更新文章或修改配置后，运行 <code>hexo clean</code>、<code>hexo generate</code> 和 <code>hexo deploy</code> 即可更新博客。</li><li><strong>自定义主题</strong>：你可以根据 NexT 主题的文档，进一步自定义博客的外观和功能。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过 Hexo 和 GitHub，你可以轻松搭建一个属于自己的个人博客，展示你的技术文章或个人作品。希望这篇博客对你有所帮助，祝你建站愉快！</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><ul><li><a href="https://hexo.io/docs/">Hexo 官方文档</a></li><li><a href="https://theme-next.js.org/docs/">NexT 主题文档</a></li><li><a href="https://pages.github.com/">GitHub Pages 官方文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;从零开始：使用-Hexo-搭建并部署个人博客到-GitHub&quot;&gt;&lt;a href=&quot;#从零开始：使用-Hexo-搭建并部署个人博客到-GitHub&quot; class=&quot;headerlink&quot; title=&quot;从零开始：使用 Hexo 搭建并部署个人博客到 GitHub&quot;&gt;&lt;/a&gt;从零开始：使用 Hexo 搭建并部署个人博客到 GitHub&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2025/02/14/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/%E7%AB%99%E6%95%99%E5%AD%A6-1/hexo-logo.jpg&quot; alt=&quot;Hexo Logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;本篇博客将详细介绍如何使用 Hexo 搭建个人博客，并将其部署到 GitHub 上，实现免费且高效的个人网站托管。我们将从环境准备开始，逐步介绍 Hexo 的安装、配置、内容创作以及最终的部署过程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="建站" scheme="https://lwow.xyz/tags/%E5%BB%BA%E7%AB%99/"/>
    
    <category term="教学" scheme="https://lwow.xyz/tags/%E6%95%99%E5%AD%A6/"/>
    
    <category term="hexo" scheme="https://lwow.xyz/tags/hexo/"/>
    
    <category term="github" scheme="https://lwow.xyz/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>学术海报</title>
    <link href="https://lwow.xyz/2025/02/14/%E5%AD%A6%E6%9C%AF%E6%B5%B7%E6%8A%A5/"/>
    <id>https://lwow.xyz/2025/02/14/%E5%AD%A6%E6%9C%AF%E6%B5%B7%E6%8A%A5/</id>
    <published>2025-02-14T15:16:13.000Z</published>
    <updated>2025-02-15T07:38:36.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Olympic-Medal-Prediction-via-Adaptive-Triple-Fusion-Combining-AAC-Model-with-ARIMA-State-Space-Dynamics"><a href="#Olympic-Medal-Prediction-via-Adaptive-Triple-Fusion-Combining-AAC-Model-with-ARIMA-State-Space-Dynamics" class="headerlink" title="Olympic Medal Prediction via Adaptive Triple-Fusion: Combining AAC Model with ARIMA-State Space Dynamics"></a>Olympic Medal Prediction via Adaptive Triple-Fusion: Combining AAC Model with ARIMA-State Space Dynamics</h2><ul><li><p><strong>Authors</strong>：Wei Li, Zixin Wang, Qixiang Gao, Fenglei Yang*</p></li><li><p><strong>Published in</strong>：CAMMIC 2025 (EI Indexed Conference)</p></li><li><p><strong>Email</strong>：<a href="mailto:&#x6c;&#105;&#119;&#101;&#105;&#48;&#48;&#56;&#48;&#48;&#x39;&#x40;&#49;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;">&#x6c;&#105;&#119;&#101;&#105;&#48;&#48;&#56;&#48;&#48;&#x39;&#x40;&#49;&#54;&#x33;&#x2e;&#99;&#x6f;&#x6d;</a></p><span id="more"></span><p><img src="/2025/02/14/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/ver2.0.jpg" alt="图片"></p></li><li><p>This poster presents a novel approach to predicting Olympic medal tallies using an Adaptive Triple-Fusion (AAS) model, which combines the AAC (senior Athlete-new Athlete-Country) model with ARIMA-State Space dynamics. The research integrates athlete dynamics and national trends, achieving a mean error rate of less than 5% for major nations in the 2024 Olympics. The framework leverages measure-theoretic probability and hierarchical Bayesian modeling to ensure robust predictions and interpretability.</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Olympic-Medal-Prediction-via-Adaptive-Triple-Fusion-Combining-AAC-Model-with-ARIMA-State-Space-Dynamics&quot;&gt;&lt;a href=&quot;#Olympic-Medal-Prediction-via-Adaptive-Triple-Fusion-Combining-AAC-Model-with-ARIMA-State-Space-Dynamics&quot; class=&quot;headerlink&quot; title=&quot;Olympic Medal Prediction via Adaptive Triple-Fusion: Combining AAC Model with ARIMA-State Space Dynamics&quot;&gt;&lt;/a&gt;Olympic Medal Prediction via Adaptive Triple-Fusion: Combining AAC Model with ARIMA-State Space Dynamics&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Authors&lt;/strong&gt;：Wei Li, Zixin Wang, Qixiang Gao, Fenglei Yang*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Published in&lt;/strong&gt;：CAMMIC 2025 (EI Indexed Conference)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Email&lt;/strong&gt;：&lt;a href=&quot;mailto:&amp;#x6c;&amp;#105;&amp;#119;&amp;#101;&amp;#105;&amp;#48;&amp;#48;&amp;#56;&amp;#48;&amp;#48;&amp;#x39;&amp;#x40;&amp;#49;&amp;#54;&amp;#x33;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;&gt;&amp;#x6c;&amp;#105;&amp;#119;&amp;#101;&amp;#105;&amp;#48;&amp;#48;&amp;#56;&amp;#48;&amp;#48;&amp;#x39;&amp;#x40;&amp;#49;&amp;#54;&amp;#x33;&amp;#x2e;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="学术" scheme="https://lwow.xyz/tags/%E5%AD%A6%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>自我介绍</title>
    <link href="https://lwow.xyz/2025/02/14/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    <id>https://lwow.xyz/2025/02/14/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/</id>
    <published>2025-02-14T04:29:20.000Z</published>
    <updated>2025-02-15T07:39:57.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><ul><li><strong>姓名</strong>：黎玮</li><li><strong>GitHub 用户名</strong>：William-Liwei</li><li><strong>Email</strong>：<a href="mailto:&#108;&#x69;&#x77;&#101;&#105;&#x30;&#48;&#x38;&#x30;&#48;&#57;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;">&#108;&#x69;&#x77;&#101;&#105;&#x30;&#48;&#x38;&#x30;&#48;&#57;&#x40;&#x31;&#54;&#x33;&#46;&#x63;&#x6f;&#x6d;</a></li></ul><h3 id="教育背景"><a href="#教育背景" class="headerlink" title="教育背景"></a>教育背景</h3><ul><li><strong>上海大学</strong>，计算机科学与技术专业，本科在读（大二）</li></ul><h3 id="技能与兴趣"><a href="#技能与兴趣" class="headerlink" title="技能与兴趣"></a>技能与兴趣</h3><ul><li><strong>编程语言</strong>：Python、C++、JavaScript</li><li><strong>框架与工具</strong>：Flask、Playwright、MySQL、MongoDB</li><li><strong>兴趣领域</strong>：人工智能、机器学习、物联网、数据分析</li></ul><h3 id="项目经验"><a href="#项目经验" class="headerlink" title="项目经验"></a>项目经验</h3><h4 id="停易达-基于物联网的全域智慧停车平台"><a href="#停易达-基于物联网的全域智慧停车平台" class="headerlink" title="停易达 - 基于物联网的全域智慧停车平台"></a>停易达 - 基于物联网的全域智慧停车平台</h4><ul><li><strong>时间</strong>：2024.03 - 2024.07</li><li><strong>描述</strong>：使用 Python 开发了基于 Flask 的前后端互动系统，并参与开发了微信小程序。</li><li><strong>成就</strong>：获上海大学 2024 年中国国际大学生创新大赛校内选拔赛金奖。</li></ul><h4 id="课程翼选通-基于-Playwright-与-Flask-的云主机部署网站"><a href="#课程翼选通-基于-Playwright-与-Flask-的云主机部署网站" class="headerlink" title="课程翼选通 - 基于 Playwright 与 Flask 的云主机部署网站"></a>课程翼选通 - 基于 Playwright 与 Flask 的云主机部署网站</h4><ul><li><strong>时间</strong>：2024.08 - 2024.11</li><li><strong>描述</strong>：该项目基于 Playwright 实现了网页自动化操作，开发了 JavaScript &amp; CSS 的 HTML 网页，运用 Flask 将 Python 程序网页化，部署在天翼云主机上。此外，还运用大模型智能分析课程评论，实现了评论情感分类、评分多维度量化。</li><li><strong>成就</strong>：获“天翼云杯”上海市大学生云计算应用大赛赛道决赛二等奖。</li></ul><h4 id="基于贝叶斯决策网络与遗传算法的产品生产装配策略优化研究"><a href="#基于贝叶斯决策网络与遗传算法的产品生产装配策略优化研究" class="headerlink" title="基于贝叶斯决策网络与遗传算法的产品生产装配策略优化研究"></a>基于贝叶斯决策网络与遗传算法的产品生产装配策略优化研究</h4><ul><li><strong>时间</strong>：2024.09 - 2024.12</li><li><strong>描述</strong>：通过二进制决策矩阵解决产品实际装配决策问题，并在 Python 中实现遗传算法将之延拓至零部件数量、工序数量不定的普遍情况，随后在次品率经贝叶斯更新的情况下完成了装配策略研究。</li><li><strong>成就</strong>：获书院本科生学术论坛二等奖、数学建模国赛省三。</li></ul><h3 id="学术研究"><a href="#学术研究" class="headerlink" title="学术研究"></a>学术研究</h3><ul><li><strong>论文</strong>：Olympic Medal Prediction via Adaptive Triple-Fusion: Combining AAC Model with ARIMA-State Space Dynamics<ul><li><strong>作者</strong>：一作</li><li><strong>会议</strong>：CAMMIC 2025（EI会议）</li><li><strong>描述</strong>：本研究提出了一种混合预测框架（AAS 模型），该框架将个体运动员的发展轨迹与国家体育实力的演变相结合。通过利用自适应融合机制将短期波动与长期趋势相结合，该模型实现了高精度的奥运会奖牌预测，并为体育竞赛预测系统提供了新的理论见解和方法工具。</li></ul></li></ul><h3 id="开源贡献"><a href="#开源贡献" class="headerlink" title="开源贡献"></a>开源贡献</h3><ul><li><strong>华为昇思 MindSpore 开源社区</strong>：参与开源实习，学习 PyTorch、Transformers 等常见包的基本用法。</li></ul><h3 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h3><ul><li><strong>邮箱</strong>：<a href="mailto:&#x6c;&#105;&#119;&#101;&#105;&#48;&#x30;&#56;&#48;&#x30;&#x39;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;">&#x6c;&#105;&#119;&#101;&#105;&#48;&#x30;&#56;&#48;&#x30;&#x39;&#x40;&#49;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;</a></li><li><strong>欢迎交流</strong>：通过 GitHub Issues 或 Pull Requests 与我交流</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于我&quot;&gt;&lt;a href=&quot;#关于我&quot; class=&quot;headerlink&quot; title=&quot;关于我&quot;&gt;&lt;/a&gt;关于我&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;姓名&lt;/strong&gt;：黎玮&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GitHub 用户名&lt;/strong&gt;：</summary>
      
    
    
    
    
    <category term="自我介绍" scheme="https://lwow.xyz/tags/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
</feed>
